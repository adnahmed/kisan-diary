datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

model User {
  id        String @id @default(uuid())
  email     String @unique
  firstName String
  lastName  String
  role      Role
  // TODO: use @db for value size limit
  // TODO: Make Country ENUM for validation
  address   String
  region    Region @relation(fields: [regionName], references: [name])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password    Password?
  Farm        Farm[]
  regionName  String
  ReadReciept ReadReciept[]
}

model Alert {
  id              String        @id @default(uuid())
  alertType       AlertType
  details         String
  affectedCrops   Crop[]
  affectedRegions Region[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  ReadReciept     ReadReciept[]
}

model ReadReciept {
  id      String @id @default(uuid())
  readBy  User   @relation(fields: [userId], references: [id])
  alert   Alert  @relation(fields: [alertId], references: [id])
  userId  String
  alertId String
}

enum AlertType {
  alert
  recommendation
}

enum Role {
  expert
  farmer
}

model Region {
  name  String  @id @unique
  User  User[]
  Alert Alert[]
  Farm  Farm[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Farm {
  id                String             @id @default(uuid())
  name              String             @unique
  region            Region             @relation(fields: [regionName], references: [name])
  user              User               @relation(fields: [owner], references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner             String             @unique
  total_land        Int?
  land_type         LandType?
  machinery         Machinery[]
  crops             Crop[]
  irrigation_source IrrigationSource[]
  regionName        String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Crop {
  id          String  @id @default(uuid())
  name        String  @unique
  picture     String?
  coveredLand Int
  farms       Farm[]
  alerts      Alert[]
}

enum IrrigationSource {
  TubeWell
  Canal
}

model City {
  id      String  @id @default(uuid())
  name    String
  country Country @relation(fields: [from], references: [name], onDelete: Cascade, onUpdate: Cascade)
  from    String
}

model Country {
  id   String @id @default(uuid())
  name String @unique
  City City[]
}

enum Machinery {
  Tractor
  Leveler
}

enum LandType {
  Nehri
  Behri
}
