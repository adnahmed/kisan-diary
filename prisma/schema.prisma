datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Season {
  Rabbi
  Kharif
}

enum IssueType {
  seed
  quality
  land_management
  water_management
  fertilizer_management
  insect_pest_management
  disease_management
  harvest
  post_harvest
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

model Alert {
  id              String        @id @default(uuid())
  alertType       AlertType
  details         String        @unique
  affectedCrops   Crop[]
  affectedRegions Region[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  ReadReciept     ReadReciept[]
}

model ReadReciept {
  id        String   @id @default(uuid())
  readBy    User     @relation(fields: [userId], references: [id])
  alert     Alert    @relation(fields: [alertId], references: [id])
  userId    String
  alertId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issue {
  id String @id @default(uuid())

  postedBy   User      @relation(fields: [userId], references: [id])
  content    String
  type       IssueType
  belongs_to Farm      @relation(fields: [farmId], references: [id])
  postedOn   DateTime  @default(now())
  updatedOn  DateTime  @updatedAt
  userId     String
  solution   Solution?
  farmId     String
}

model Solution {
  id        String   @id @default(uuid())
  postedBy  User     @relation(fields: [userId], references: [id])
  content   String
  for       Issue    @relation(fields: [issueId], references: [id])
  postedOn  DateTime @default(now())
  updatedOn DateTime @updatedAt
  userId    String
  issueId   String   @unique
}

enum AlertType {
  alert
  recommendation
}

enum Role {
  expert
  farmer
}

model Region {
  name   String  @id @unique
  User   User[]
  Alert  Alert[]
  Farm   Farm[]
  Crop   Crop?   @relation(fields: [cropId], references: [id])
  cropId String?
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Farm {
  id                String             @id @default(uuid())
  name              String             @unique
  region            Region             @relation(fields: [regionName], references: [name])
  user              User               @relation(fields: [owner], references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner             String             @unique
  total_land        Int
  financial_data    FinancialData[]
  soil_type         SoilType
  machinery         Machinery[]
  irrigation_source IrrigationSource[]
  regionName        String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  Issue             Issue[]
}

model Crop {
  id                String          @id @default(uuid())
  name              String          @unique
  coveredLand       Int?
  alerts            Alert[]
  suitableRegions   Region[]
  suitableSeasons   Season[]
  suitableSoilTypes SoilType[]
  FinancialData     FinancialData[]
}

model FinancialData {
  id         String  @id @default(uuid())
  path       String
  crop       Crop    @relation(fields: [cropId], references: [id])
  year_start Int
  year_end   Int
  Farm       Farm?   @relation(fields: [farmId], references: [id])
  farmId     String?
  cropId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum IrrigationSource {
  TubeWell
  Canal
}

model City {
  id      String  @id @default(uuid())
  name    String
  country Country @relation(fields: [from], references: [name], onDelete: Cascade, onUpdate: Cascade)
  from    String
}

model Country {
  id   String @id @default(uuid())
  name String @unique
  City City[]
}

enum Machinery {
  Tractor
  Leveler
}

enum SoilType {
  Sandy
  Silt
  Clay
  Loamy
}

// @description: File Upload Data for farmer and expert
model FileUpload {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  path           String        @unique
  userId         String
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
}

enum MessageStatus {
  pending
  sent
  delivered
  seen
}

enum MessageDirection {
  incoming
  outgoing
}

model Conversation {
  id           String       @id @default(uuid())
  participants User[]
  files        FileUpload[]
  messages     Message[]
}

model Message {
  id             String           @id @default(uuid())
  status         MessageStatus
  direction      MessageDirection
  isRead         Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updateAt       DateTime         @updatedAt()
  sender         User             @relation(name: "UserSentMessages", fields: [senderId], references: [id])
  reciever       User             @relation(name: "UserRecievedMessages", fields: [recieverId], references: [id])
  senderId       String
  recieverId     String
  Conversation   Conversation     @relation(fields: [conversationId], references: [id])
  conversationId String
}

model User {
  id               String    @id @default(uuid())
  sentMessages     Message[] @relation(name: "UserSentMessages")
  recievedMessages Message[] @relation(name: "UserRecievedMessages")
  email            String    @unique
  firstName        String
  lastName         String
  role             Role
  // TODO: use @db for value size limit
  // TODO: Make Country ENUM for validation
  address          String
  region           Region    @relation(fields: [fromRegion], references: [name])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password        Password?
  farm            Farm[]
  fromRegion      String
  ReadReciept     ReadReciept[]
  files           FileUpload[]
  // conversations Conversation[]
  postedIssues    Issue[]
  postedSolutions Solution[]
  participatedIn  Conversation[]
}
